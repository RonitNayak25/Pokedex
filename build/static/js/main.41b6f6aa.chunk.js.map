{"version":3,"sources":["services/pokemon.js","components/Card/typeColors.js","components/Card/Card.js","components/Card/index.js","components/Navbar/Navbar.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","src","sprites","front_default","alt","name","types","map","type","style","backgroundColor","weight","height","abilities","ability","Navbar","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","prev","loadingPokemon","results","fetchData","previous","all","pokemonRecord","_pokemonData","console","log","onClick","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41b6f6aa.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                resolve(data);\n            })\n    })\n}\n\nexport async function getPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                resolve(data);\n            })\n    })\n}","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React from 'react';\nimport './style.css';\nimport typeColors from './typeColors';\n\nfunction Card({ pokemon }) {\n    return (\n        <div className=\"Card\">\n            <div className=\"Card__img\">\n                <img src={pokemon.sprites.front_default} alt=\"\" />\n            </div>\n            <div className=\"Card__name\">\n                {pokemon.name}\n            </div>\n            <div className=\"Card__types\">\n                {pokemon.types.map((type) => {\n                    return (\n                        <div className=\"Card__type\" style={{backgroundColor: typeColors[type.type.name]}}>\n                            {type.type.name}\n                        </div>\n                    );\n                })}\n            </div>\n            <div className=\"Card__info\">\n                <div className=\"Card__data Card__data--weight\">\n                    <p className=\"title\">Weight</p>\n                    <p>{pokemon.weight}</p>\n                </div>\n                <div className=\"Card__data Card__data--height\">\n                    <p className=\"title\">Height</p>\n                    <p>{pokemon.height}</p>\n                </div>\n                <div className=\"Card__data Card__data--ability\">\n                    <p className=\"title\">Ability</p>\n                    <p>{pokemon.abilities[0].ability.name}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import Card from './Card'\n\nexport default Card;","import React from 'react';\nimport './style.css';\n\nfunction Navbar() {\n    return (\n        <div className=\"Navbar\">\n            PokeDex\n        </div>\n    );\n}\n\nexport default Navbar;","import Navbar from './Navbar';\n\nexport default Navbar;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { getAllPokemon, getPokemon } from \"./services/pokemon\";\nimport Card from \"./components/Card\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState(\"\");\n  const [prevUrl, setPrevUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const initialUrl = \"https://pokeapi.co/api/v2/pokemon\";\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setNextUrl(response.next);\n      setPrevUrl(response.prev);\n      await loadingPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl);\n    await loadingPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl);\n    await loadingPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const loadingPokemon = async (data) => {\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        let pokemonRecord = await getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n    setPokemonData(_pokemonData);\n  };\n  console.log(pokemonData);\n  return (\n    <div>\n      <Navbar />\n      {loading ? (\n        <h1>Catching em all...</h1>\n      ) : (\n        <>\n          <div className=\"btn\">\n            <button onClick={prev}>Prev</button>\n            <button onClick={next}>Next</button>\n          </div>\n          <div className=\"grid-container\">\n            {pokemonData.map((pokemon, i) => {\n              return <Card key={i} pokemon={pokemon} />;\n            })}\n          </div>\n          <div className=\"btn\">\n            <button onClick={prev}>Prev</button>\n            <button onClick={next}>Next</button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}